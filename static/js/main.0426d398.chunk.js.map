{"version":3,"sources":["Weather/Weather.js","ExtraWeatherInfo/ExtraWeatherInfo.js","ChooseCityForm/ChooseCityForm.js","ForecastChart/ForecastChart.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","weatherBasicData","city","region","country","tempCelsius","minTemp","maxTemp","weatherIcon","id","src","alt","description","ExtraInfo","weatherExtraData","windSpeed","humidity","atmoPressure","sunriseTime","sunsetTime","Form","onSubmit","loadWeather","type","name","autoComplete","placeholder","error","errorInfo","role","ForecastChart","options","tooltips","callbacks","title","tooltipItem","data","label","afterLabel","forecastData","App","updateWeatherDataJson","location","weatherInfo","dailyForecast","weatherData","icon","undefined","celsius","calCelsiusJson","setState","updateExtraWeatherDataJson","channelJson","Math","round","updateExtraWeatherDataAPI","zipWeatherData","date","Date","sys","sunrise","getHours","getMinutes","sunset","wind","speed","main","pressure","updateWeatherForecast","response","weeklyForecast","days","dailyHighTemp","dailyLowTemp","dailyDescription","updateWeatherForecastAPI","updateWeatherForecastJson","labels","datasets","text","borderColor","fill","idx","dailyData","push","forecastWeatherData","tempWeeklyForecast","forecastDay","list","length","dt","toString","split","temp_max","temp_min","weather","day","hasOwnProperty","min","apply","max","Object","keys","updateCityRequest","isError","handleChange","checked","temp","getWeather","event","a","preventDefault","cityZipCode","target","elements","value","fetch","process","zipWeatherAPICall","forecastAPICall","json","ForecastWeatherData","updateWeatherDataAPI","query","state","bind","this","onChange","offColor","onColor","width","checkedIcon","uncheckedIcon","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0426d398.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className={\"container\"}>\r\n            <div className={\"cards pt-4\"}>\r\n                <h1>{props.weatherBasicData.city}</h1>\r\n                <h4>{props.weatherBasicData.region} {props.weatherBasicData.country}</h4>\r\n                {props.weatherBasicData.tempCelsius ?\r\n                    <h1 className={\"py-2\"}>{props.weatherBasicData.tempCelsius}&deg;c</h1> : null}\r\n                {minmaxTemp(props.weatherBasicData.minTemp, props.weatherBasicData.maxTemp)}\r\n                {props.weatherBasicData.weatherIcon ?\r\n                    <i id=\"icon\"><img id=\"wicon\"\r\n                                      src={`http://openweathermap.org/img/w/${props.weatherBasicData.weatherIcon}.png`}\r\n                                      alt=\"Weather icon\"/></i> : null}\r\n                <h4 className={\"py-3\"}> {props.weatherBasicData.description}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nfunction minmaxTemp(minTemp, maxTemp) {\r\n    return (\r\n        <h3>\r\n            <span className={\"px-4\"}>{minTemp}&deg;c</span>\r\n            <span className={\"px-4\"}>{maxTemp}&deg;c</span>\r\n        </h3>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React from 'react'\r\nimport './ExtraWeatherInfo.css'\r\n\r\nconst ExtraInfo = props => {\r\n    return (\r\n        <div className={\"container\"}>\r\n            <div className={\"cards pt-4\"}>\r\n                <ol>\r\n                    <li className={\"py-6\"}>Speed: {props.weatherExtraData.windSpeed} m/s</li>\r\n                    <li className={\"py-6\"}>Humidity: {props.weatherExtraData.humidity} %</li>\r\n                    <li className={\"py-6\"}>Pressure: {props.weatherExtraData.atmoPressure} hpa</li>\r\n                    <li className={\"py-6\"}>Sunrise Time: {props.weatherExtraData.sunriseTime}</li>\r\n                    <li className={\"py-6\"}>Sunset Time: {props.weatherExtraData.sunsetTime}</li>\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ExtraInfo;","import React from 'react'\r\nimport './ChooseCityForm.css'\r\n\r\nconst Form = props => {\r\n    return (\r\n        <div className={\"container text-light\"}>\r\n            <form onSubmit={props.loadWeather}>\r\n                <div className={\"row\"}>\r\n                    <div className={\"col-md-3 offset-md-2\"}>\r\n                        <input type={\"text\"} className={\"form-control\"} name={\"cityZipCode\"} autoComplete={\"off\"}\r\n                               placeholder={\"Zip Code\"}/>\r\n                    </div>\r\n                    <div className={\"col-md-3\"}>\r\n                        <input type={\"text\"} className={\"form-control\"} name={\"country\"} autoComplete={\"off\"}\r\n                               placeholder={\"Country\"}/>\r\n                    </div>\r\n                    <div className={\"col-md-3 mt-md-0 py-2 text-md-left\"}>\r\n                        <button className={\"btn btn-warning\"}>Real Time API</button>\r\n                    </div>\r\n                </div>\r\n                <div>To Change location Please Enter Zip Code and Country (optional; default country: us)</div>\r\n            </form>\r\n            <div>{props.error ? error(props.errorInfo) : null}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nfunction error(error) {\r\n    return (\r\n        <div className={\"alert-alert-danger mx-5\"} role={\"alert\"}>{error}</div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\nimport './ForecastChart.css'\r\n\r\nconst ForecastChart = props => {\r\n    return (\r\n        <div className={\"chart\"}>\r\n            <h4>Daily Forecast</h4>\r\n            <Line\r\n                options={\r\n                    {\r\n                        tooltips: {\r\n                            callbacks: {\r\n                                title: function (tooltipItem, data) {\r\n                                    return data['labels'][tooltipItem[0]['index']];\r\n                                },\r\n                                label: function (tooltipItem, data) {\r\n                                    return \"max: \" + data['datasets'][0]['data'][tooltipItem['index']] + \"℃\\n\"\r\n                                        + \"min: \" + data['datasets'][1]['data'][tooltipItem['index']] + \"℃\";\r\n                                },\r\n                                afterLabel: function (tooltipItem, data) {\r\n                                    return data['datasets'][0]['text'][tooltipItem['index']];\r\n                                },\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                data={props.forecastData}\r\n\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ForecastChart;","import React, {Component} from 'react';\nimport './App.css';\nimport Weather from './Weather/Weather'\nimport ExtraInfo from \"./ExtraWeatherInfo/ExtraWeatherInfo\"\nimport Form from \"./ChooseCityForm/ChooseCityForm\"\nimport ForecastChart from \"./ForecastChart/ForecastChart\"\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport {query} from './weather.json';\nimport Switch from 'react-switch'\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.weatherInfo = query;\n        this.state = {\n            checked: false,\n            weatherBasicData: {},\n            weatherExtraData: {},\n            forecastData: {},\n            error: {}\n        };\n        this.handleChange = this.handleChange.bind(this);\n    };\n\n    componentDidMount() {\n        this.updateWeatherDataJson();\n        this.updateExtraWeatherDataJson();\n        this.updateWeatherForecast(null);\n        this.updateCityRequest(false, \"\");\n    };\n\n    updateWeatherDataJson = () => {\n        const location = this.weatherInfo[\"results\"][\"channel\"][\"location\"];\n        const dailyForecast = this.weatherInfo[\"results\"][\"channel\"][\"item\"];\n        const weatherData = {\n            city: location[\"city\"],\n            region: location[\"region\"] + \", \",\n            country: location[\"country\"],\n            icon: undefined,\n            celsius: this.calCelsiusJson(dailyForecast[\"condition\"][\"temp\"]),\n            minTemp: this.calCelsiusJson(dailyForecast[\"forecast\"][0][\"low\"]),\n            maxTemp: this.calCelsiusJson(dailyForecast[\"forecast\"][0][\"high\"]),\n            description: this.weatherInfo[\"results\"][\"channel\"][\"item\"][\"condition\"][\"text\"]\n        };\n        this.setState({\n            weatherBasicData: weatherData\n        })\n    };\n\n    updateWeatherDataAPI(zipWeatherData) {\n        const weatherData = {\n            city: zipWeatherData.name,\n            region: \"\",\n            country: zipWeatherData.sys.country,\n            celsius: zipWeatherData.main.temp,\n            minTemp: zipWeatherData.main.temp_min,\n            maxTemp: zipWeatherData.main.temp_max,\n            description: zipWeatherData.weather[0].description,\n            icon: zipWeatherData.weather[0].icon\n        };\n        this.setState({\n            weatherBasicData: weatherData\n        })\n    }\n\n    updateExtraWeatherDataJson = () => {\n        const channelJson = this.weatherInfo[\"results\"][\"channel\"];\n        const weatherData = {\n            windSpeed: Math.round(channelJson[\"wind\"][\"speed\"] * 0.44704),\n            humidity: channelJson[\"atmosphere\"][\"humidity\"],\n            atmoPressure: channelJson[\"atmosphere\"][\"pressure\"],\n            sunriseTime: channelJson[\"astronomy\"][\"sunrise\"],\n            sunsetTime: channelJson[\"astronomy\"][\"sunset\"]\n        };\n        this.setState({\n            weatherExtraData: weatherData\n        })\n    };\n\n    updateExtraWeatherDataAPI = (zipWeatherData) => {\n        let date = new Date(zipWeatherData.sys.sunrise * 1000);\n        let sunrise = date.getHours() + \":\" + date.getMinutes();\n        date = new Date(zipWeatherData.sys.sunset * 1000);\n        let sunset = date.getHours() + \":\" + date.getMinutes();\n        const weatherData = {\n            sunriseTime: sunrise,\n            sunsetTime: sunset,\n            windSpeed: zipWeatherData.wind.speed,\n            humidity: zipWeatherData.main.humidity,\n            atmoPressure: zipWeatherData.main.pressure,\n        };\n        this.setState({\n            weatherExtraData: weatherData\n        })\n    };\n\n    updateWeatherForecast = (response) => {\n        let weeklyForecast = {\n            days: [],\n            dailyHighTemp: [],\n            dailyLowTemp: [],\n            dailyDescription: []\n        };\n        response ? weeklyForecast = this.updateWeatherForecastAPI(response, weeklyForecast) :\n            weeklyForecast = this.updateWeatherForecastJson(weeklyForecast);\n        this.setState({\n            forecastData: {\n                labels: weeklyForecast.days,\n                datasets: [\n                    {\n                        text: weeklyForecast.dailyDescription,\n                        label: 'High Temperature',\n                        borderColor: \"red\",\n                        fill: false,\n                        data: weeklyForecast.dailyHighTemp\n                    },\n                    {\n                        text: weeklyForecast.dailyDescription,\n                        label: 'Low Temperature',\n                        borderColor: \"blue\",\n                        fill: false,\n                        data: weeklyForecast.dailyLowTemp\n                    }\n                ]\n            }\n        })\n    };\n\n    updateWeatherForecastJson = (weeklyForecast) => {\n        const days = 7;\n        for (let idx = 0; idx < days; idx++) {\n            let dailyData = this.weatherInfo[\"results\"][\"channel\"][\"item\"][\"forecast\"][idx];\n            weeklyForecast.days.push(dailyData[\"day\"]);\n            weeklyForecast.dailyLowTemp.push(this.calCelsiusJson(dailyData[\"low\"]));\n            weeklyForecast.dailyHighTemp.push(this.calCelsiusJson(dailyData[\"high\"]));\n            weeklyForecast.dailyDescription.push(dailyData[\"text\"]);\n        }\n        return weeklyForecast;\n    };\n\n    /**\n     * /**\n     * The given dataset is 5 day / 3 hour forecast.\n     * This function calculate the min and max temperature of each day,\n     * consider all the received hourly forecasts for this day.\n     * @param forecastWeatherData - the api response\n     * @param weeklyForecast - the dictionary for the forecast\n     * @returns dictionary of the forecast results\n     */\n    updateWeatherForecastAPI = (forecastWeatherData, weeklyForecast) => {\n        let tempWeeklyForecast = {};\n        let forecastDay = \"\";\n        for (let idx = 0; idx < forecastWeatherData.list.length; idx++) {\n            const dailyForecast = forecastWeatherData.list[idx];\n            forecastDay = new Date(dailyForecast.dt * 1000).toString().split(' ')[0];\n            if (!tempWeeklyForecast[forecastDay])\n                tempWeeklyForecast[forecastDay] = [];\n            tempWeeklyForecast[forecastDay].push(dailyForecast.main.temp_max);\n            tempWeeklyForecast[forecastDay].push(dailyForecast.main.temp_min);\n            weeklyForecast.dailyDescription.push(dailyForecast.weather[0].description);\n        }\n        for (let day in tempWeeklyForecast) {\n            if (tempWeeklyForecast.hasOwnProperty(day)) {\n                weeklyForecast.dailyLowTemp.push(Math.min.apply(null, tempWeeklyForecast[day]));\n                weeklyForecast.dailyHighTemp.push(Math.max.apply(null, tempWeeklyForecast[day]));\n            }\n        }\n        weeklyForecast.days = Object.keys(tempWeeklyForecast);\n        return weeklyForecast;\n    };\n\n    updateCityRequest = (isError, text) => {\n        this.setState({\n            error: isError,\n            errorInfo: text\n        })\n    };\n\n    handleChange = (checked) => {\n        this.setState({checked});\n    };\n\n    calCelsiusJson = (temp) => {\n        return Math.round((temp - 32) * 5 / 9);\n    };\n\n    getWeather = async (event) => {\n        event.preventDefault();\n        let cityZipCode = event.target.elements.cityZipCode.value;\n        let country = event.target.elements.country.value;\n        if (!cityZipCode) {\n            cityZipCode = \"10007\";\n            country = \"us\";\n        }\n        try {\n            const zipWeatherAPICall = await fetch(process.env.REACT_APP_WEATHER_API +\n                '&units=metric&zip=' + cityZipCode + \",\" + country);\n            const forecastAPICall = await fetch(process.env.REACT_APP_WEATHER_FORECAST_API +\n                '&units=metric&zip=' + cityZipCode + \",\" + country);\n            const zipWeatherData = await zipWeatherAPICall.json();\n            const ForecastWeatherData = await forecastAPICall.json();\n            this.updateWeatherDataAPI(zipWeatherData);\n            this.updateExtraWeatherDataAPI(zipWeatherData);\n            this.updateExtraWeatherDataAPI(zipWeatherData);\n            this.updateWeatherForecast(ForecastWeatherData);\n            this.updateCityRequest(false, \"\");\n        } catch (ex) {\n            this.updateCityRequest(true, \"Invalid Zip Code or Country, Please try again\");\n        }\n    };\n\n    render() {\n        return (\n            <div className={\"App\"}>\n                <Form loadWeather={this.getWeather} error={this.state.error} errorInfo={this.state.errorInfo}/>\n                <Weather weatherBasicData={this.state.weatherBasicData}/>\n                <div className={\"extraData\"}>\n                    <label><span>Press for  </span>\n                        <Switch\n                            onChange={this.handleChange}\n                            checked={this.state.checked}\n                            offColor={\"#FFA500\"}\n                            onColor={\"#ffedcc\"}\n                            width={70}\n                            checkedIcon={<div>less</div>}\n                            uncheckedIcon={<div>more</div>}\n                        /> <span>  Information</span>\n                    </label>\n                    {this.state.checked ? <ExtraInfo weatherExtraData={this.state.weatherExtraData}/> : null}\n                </div>\n                <ForecastChart forecastData={this.state.forecastData}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}